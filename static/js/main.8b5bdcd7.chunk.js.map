{"version":3,"sources":["components/SearchBar.js","components/Sentence.js","components/DataViewer.js","components/SnorkelSearch.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","className","id","type","value","searchValue","onChange","handleChange","Sentence","data","search","highlight","DataViewer","console","log","sentenceData","map","item","key","match","SnorkelSearch","useState","setSearchValue","filteredData","setFilteredData","e","target","results","toLowerCase","el","includes","annotateData","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ivFAgBeA,MAbf,SAAmBC,GACjB,OACC,yBAAKC,UAAU,aACb,2BACEC,GAAG,aACHC,KAAK,OACLC,MAAOJ,EAAMK,YACbC,SAAUN,EAAMO,iBCoBRC,MA3Bf,SAAkBR,GAAQ,IACjBS,EAA4BT,EAA5BS,KAAMC,EAAsBV,EAAtBU,OAAQC,EAAcX,EAAdW,UAgBtB,OACE,kBAAC,WAAD,KAGK,wBAAIV,UAAS,UAAKS,GAAUC,EAAY,YAAc,KAAOF,KCDtDG,MAnBf,SAAoBZ,GAGlB,OAFDa,QAAQC,IAAId,EAAMe,cAGhB,yBAAKd,UAAU,cACb,4BACGD,EAAMe,aAAaC,KAAI,SAAAC,GACtB,OAAO,kBAAC,EAAD,CACNC,IAAKD,EAAKf,GACVO,KAAMQ,EAAKR,KACXE,UAAWM,EAAKE,MAChBT,OAAQV,EAAMK,oBCkCTe,MA1Cf,WAAyB,MAEeC,mBAAS,IAFxB,mBAEhBhB,EAFgB,KAEHiB,EAFG,OAIiBD,mBAASZ,GAJ1B,mBAIhBc,EAJgB,KAIFC,EAJE,KAkCvB,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,CAAWnB,YAAaA,EAAaE,aA9BzC,SAAsBkB,GACpB,IAAMf,EAASe,EAAEC,OAAOtB,MACxBkB,EAAeZ,GAGf,IAAMiB,EAWR,SAAsBjB,GAEpB,OADAA,EAASA,EAAOkB,YAAYlB,GACrBD,EAAKO,KAAI,SAAAa,GAMd,OALIA,EAAGpB,KAAKmB,cAAcE,SAASpB,GACjCmB,EAAE,OAAY,EAEdA,EAAE,OAAY,EAETA,KAnBOE,CAAarB,GAC7Bc,EAAgBG,MAyBd,kBAAC,EAAD,CAAYZ,aAAcQ,EAAclB,YAAaA,MC/B5C2B,MARf,WACE,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,QCIcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjB,MACvB,2DCZNkB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8b5bdcd7.chunk.js","sourcesContent":["import React from 'react'\n\n\nfunction SearchBar(props) {\n  return (\n  \t<div className='SearchBar'>\n\t    <input\n\t      id='search-bar'\n\t      type='text'\n\t      value={props.searchValue}\n\t      onChange={props.handleChange}\n\t    />\n    </div>\n  )\n}\n\nexport default SearchBar","import React, { Fragment } from 'react'\n\n\nfunction Sentence(props) {\n\tconst { data, search, highlight } = props\n\n\t// const highlightSearchInSentence = () => {\n //    // find index of search within sentence\n //    const index = data.toLowerCase().indexOf(search.toLowerCase())\n //    const length = search.length\n\n //    // wrap search in span with highlight class\n //    return <li>\n //      {data.slice(0, index)}\n //      <span className='highlight'>{data.slice(index, index + length)}</span>\n //      {data.slice(index + length)}\n //    </li>\n //  }\n\n\n\treturn (\n\t  <Fragment>\n\t    {\n        // search ? highlightSearchInSentence() : <li>{data}</li>\n        <li className={`${search && highlight ? 'highlight' : ''}`}>{data}</li>\n      }\n\t  </Fragment>\n\t)\n}\n\nexport default Sentence","import React from 'react'\nimport Sentence from './Sentence'\n\n\nfunction DataViewer(props) {\n\tconsole.log(props.sentenceData)\n\n  return (\n  \t<div className='DataViewer'>\n\t    <ul>\n\t      {props.sentenceData.map(item => {\n\t        return <Sentence\n\t        \tkey={item.id}\n\t        \tdata={item.data}\n\t        \thighlight={item.match}\n\t        \tsearch={props.searchValue}\n\t        />\n\t      })}\n\t    </ul>\n    </div>\n  )\n}\n\nexport default DataViewer\n","import React, { Fragment, useState } from 'react'\n\nimport data from '../data/sentences.json'\nimport SearchBar from './SearchBar'\nimport DataViewer from './DataViewer'\n\n\nfunction SnorkelSearch() {\n  // Using react hooks to set state (https://reactjs.org/docs/hooks-state.html)\n  const [searchValue, setSearchValue] = useState(\"\")\n  // const [filteredData, setFilteredData] = useState(data)\n  const [filteredData, setFilteredData] = useState(data)\n\n  function handleChange(e) {\n    const search = e.target.value\n    setSearchValue(search)\n\n    // const results = filterData(search)\n    const results = annotateData(search)\n    setFilteredData(results)\n  }\n\n  // function filterData(search) {\n  //   search = search.toLowerCase(search)\n  //   return data.filter(el => {\n  //     return el.data.toLowerCase().includes(search)\n  //   })\n  // }\n\n  function annotateData(search) {\n    search = search.toLowerCase(search)\n    return data.map(el => {\n      if (el.data.toLowerCase().includes(search)) {\n        el['match'] = true\n      } else {\n        el['match'] = false\n      }\n      return el\n    })\n  }\n\n  return (\n    <Fragment>\n      <SearchBar searchValue={searchValue} handleChange={handleChange} />\n      <DataViewer sentenceData={filteredData} searchValue={searchValue} />    \n    </Fragment>\n  )\n}\n\nexport default SnorkelSearch","import React from 'react';\nimport './App.css';\n\nimport SnorkelSearch from './components/SnorkelSearch';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SnorkelSearch />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}